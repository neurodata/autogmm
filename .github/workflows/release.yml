name: Release

on:
  push:
    tags:
      - "v*.*.*"          # e.g., v0.1.0, v0.1.1

permissions:
  id-token: write         # for PyPI Trusted Publishing (OIDC)
  contents: read

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade packaging tooling
        run: python -m pip install --upgrade pip setuptools wheel build twine

      - name: Clean build dirs
        run: rm -rf dist build src/autogmm.egg-info

      - name: Build sdist and wheel
        run: python -m build --no-isolation

      - name: List dist contents
        run: ls -l dist

      # Compute the exact wheel path and export it so all later steps use the SAME file
      - name: Capture wheel path
        run: |
          WHEEL="$(ls dist/*.whl | head -n 1)"
          echo "WHEEL=$WHEEL" >> "$GITHUB_ENV"
          echo "Using wheel: $WHEEL"

      - name: Twine check (mirror action)
        run: twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
            packages-dir: dist        # upload exactly what just built
            skip-existing: true
            verify-metadata: false    # <-- turn OFF the action's duplicate check
            print-hash: true

      - name: Inspect wheel METADATA
        run: |
            python - << 'PY'
            import os, zipfile, sys
            wheel = os.environ.get("WHEEL")
            print("Inspecting wheel:", wheel)
            if not wheel or not os.path.exists(wheel):
                print("Wheel not found", file=sys.stderr); sys.exit(1)
            with zipfile.ZipFile(wheel) as z:
                metas = [n for n in z.namelist() if n.endswith("METADATA")]
                if not metas:
                    print("No METADATA in wheel!", file=sys.stderr); sys.exit(1)
                data = z.read(metas[0]).decode("utf-8", "replace")
                print([l for l in data.splitlines() if l.startswith("Name:")][:1] or ["Name: MISSING"])
                print([l for l in data.splitlines() if l.startswith("Version:")][:1] or ["Version: MISSING"])
                print("\n--- first 40 lines of METADATA ---")
                print("\n".join(data.splitlines()[:40]))
            PY
